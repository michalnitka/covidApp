{"version":3,"sources":["Components/Map.js","serviceWorker.js","index.js"],"names":["Map","state","countries","fetch","method","redirect","then","response","json","data","Countries","forEach","country","push","catch","err","console","log","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","ISO_A2","properties","countryName","CountryCode","props","setTooltipContent","Country","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","Date","onMouseLeave","style","default","fill","outline","border","hover","pressed","React","Component","memo","Boolean","window","location","hostname","match","App","confirmed","newConfirmed","deaths","newDeaths","recovered","newRecovered","date","setState","this","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kQAYMA,E,4MACJC,MAAQ,CACNC,UAAW,I,kEAEQ,IAAD,OAClBC,MAAM,qCAAsC,CAC1CC,OAAQ,MACRC,SAAU,WAMTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GAKLA,EAAKC,UAAUC,SAAQ,SAACC,GAAD,OAAa,EAAKX,MAAMC,UAAUW,KAAKD,SAG/DE,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAIR,IAAD,OACP,OACE,oCACE,kBAAC,gBAAD,CAAeG,WAAS,GAAGC,iBAAkB,CAAEC,MAAO,MACpD,kBAAC,gBAAD,KACE,kBAAC,cAAD,CAAaC,UApCvB,2GAqCa,qBAAGC,YACUC,KAAI,SAACC,GAAD,OACd,kBAAC,YAAD,CACEC,IAAKD,EAAIE,OACTL,UAAWG,EACXG,aAAc,WAAO,IACXC,EAAWJ,EAAIK,WAAfD,OACR,EAAK3B,MAAMC,UAAUS,SAAQ,SAACmB,GACxBA,EAAYC,cAAgBH,GAC9B,EAAKI,MAAMC,kBACTH,EAAYI,QACZJ,EAAYK,eACZL,EAAYM,aACZN,EAAYO,YACZP,EAAYQ,UACZR,EAAYS,eACZT,EAAYU,aACZV,EAAYW,UAOpBC,aAAc,WACZ,EAAKV,MAAMC,kBAAkB,KAE/BU,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,OACTC,OAAQ,SAEVC,MAAO,CACLH,KAAM,OACNC,QAAS,QAEXG,QAAS,CACPJ,KAAM,OACNC,QAAS,wB,GA1EfI,IAAMC,WAwFTC,iBAAKpD,G,MCxFAqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICDAC,E,4MACJzD,MAAQ,CACNW,QAAS,GACT+C,UAAW,KACXC,aAAc,KACdC,OAAQ,KACRC,UAAW,KACXC,UAAW,KACXC,aAAc,KACdC,KAAM,I,EAGRhC,kBAAoB,SAClBrB,EACA+C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,EAAKC,SAAS,CACZtD,UACA+C,YACAC,eACAC,SACAC,YACAC,YACAC,eACAC,U,uDAIF,OACE,6BACE,kBAAC,EAAD,CAAKhC,kBAAmBkC,KAAKlC,oBACN,IAAtBkC,KAAKlE,MAAMW,QACV,GAEA,kBAAC,IAAD,KACE,uCAAauD,KAAKlE,MAAMW,SACxB,+CACoBuD,KAAKlE,MAAM0D,UAC7B,+BAFF,eAE4BQ,KAAKlE,MAAM2D,cAGvC,2CACgBO,KAAKlE,MAAM4D,OAD3B,IACmC,+BADnC,eAC6D,IAC1DM,KAAKlE,MAAM6D,WAEd,yCACcK,KAAKlE,MAAM8D,UADzB,IACoC,+BADpC,kBACiE,IAC9DI,KAAKlE,MAAM+D,aAAc,KAE5B,2CAAiBG,KAAKlE,MAAMgE,Y,GAvDtBd,aA+DZiB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDkDnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEd/D,OAAM,SAAAgE,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.ec5b6cb7.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\n\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nclass Map extends React.Component {\r\n  state = {\r\n    countries: [],\r\n  };\r\n  componentDidMount() {\r\n    fetch(\"https://api.covid19api.com/summary\", {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      // headers: {\r\n      //   \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n      //   \"x-rapidapi-key\": \"5f1ec83cbamsh630e60b9c99d261p1940f8jsnfaa35470985a\",\r\n      // },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // data.response.map((item) => {\r\n        //   this.state.countries.push(item.Countries);\r\n        // });\r\n        // this.state.countries.push(data.Countries.Country);\r\n        data.Countries.forEach((country) => this.state.countries.push(country));\r\n      })\r\n\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n          <ZoomableGroup>\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map((geo) => (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    onMouseEnter={() => {\r\n                      const { ISO_A2 } = geo.properties;\r\n                      this.state.countries.forEach((countryName) => {\r\n                        if (countryName.CountryCode === ISO_A2) {\r\n                          this.props.setTooltipContent(\r\n                            countryName.Country,\r\n                            countryName.TotalConfirmed,\r\n                            countryName.NewConfirmed,\r\n                            countryName.TotalDeaths,\r\n                            countryName.NewDeaths,\r\n                            countryName.TotalRecovered,\r\n                            countryName.NewRecovered,\r\n                            countryName.Date\r\n                          );\r\n                        } else {\r\n                          return;\r\n                        }\r\n                      });\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      this.props.setTooltipContent(\"\");\r\n                    }}\r\n                    style={{\r\n                      default: {\r\n                        fill: \"#D6D6DA\",\r\n                        outline: \"none\",\r\n                        border: \"black\",\r\n                      },\r\n                      hover: {\r\n                        fill: \"#F53\",\r\n                        outline: \"none\",\r\n                      },\r\n                      pressed: {\r\n                        fill: \"#E42\",\r\n                        outline: \"none\",\r\n                      },\r\n                    }}\r\n                  />\r\n                ))\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        </ComposableMap>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default memo(Map);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport Map from \"./Components/Map\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// function App() {\n//   const [content, setContent] = useState(\"\");\n//   return (\n//     <div>\n//       <Map setTooltipContent={setContent} />\n//       <ReactTooltip>{content}</ReactTooltip>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  state = {\n    country: \"\",\n    confirmed: null,\n    newConfirmed: null,\n    deaths: null,\n    newDeaths: null,\n    recovered: null,\n    newRecovered: null,\n    date: \"\",\n  };\n\n  setTooltipContent = (\n    country,\n    confirmed,\n    newConfirmed,\n    deaths,\n    newDeaths,\n    recovered,\n    newRecovered,\n    date\n  ) => {\n    this.setState({\n      country,\n      confirmed,\n      newConfirmed,\n      deaths,\n      newDeaths,\n      recovered,\n      newRecovered,\n      date,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Map setTooltipContent={this.setTooltipContent} />\n        {this.state.country == \"\" ? (\n          \"\"\n        ) : (\n          <ReactTooltip>\n            <p>Country: {this.state.country}</p>\n            <p>\n              Confirmed cases: {this.state.confirmed}\n              <span></span> New cases: {this.state.newConfirmed}\n            </p>\n\n            <p>\n              Death total: {this.state.deaths} <span></span> New deaths:{\" \"}\n              {this.state.newDeaths}\n            </p>\n            <p>\n              Recovered: {this.state.recovered} <span></span> New recovered:{\" \"}\n              {this.state.newRecovered}{\" \"}\n            </p>\n            <p>Update time: {this.state.date}</p>\n          </ReactTooltip>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}