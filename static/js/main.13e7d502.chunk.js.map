{"version":3,"sources":["../node_modules/moment/src/lib/locale sync","Components/Map.js","serviceWorker.js","Components/ReactTooltip.js","Components/Charts.js","Components/Input.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Map","state","countries","props","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","ISO_A2","properties","forEach","countryName","CountryCode","setTooltipContent","Country","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","Date","onMouseLeave","style","default","fill","outline","border","hover","pressed","React","Component","memo","Boolean","window","location","hostname","match","Tooltip","data","country","confirmed","newConfirmed","deaths","newDeaths","recovered","newRecovered","date","labels","datasets","backgroundColor","Chart","Input","name","this","value","slug","App","setState","fetch","method","redirect","then","response","json","Countries","push","catch","err","console","log","className","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.13e7d502.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 125;","import React, { memo } from \"react\";\r\n\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nclass Map extends React.Component {\r\n  state = {\r\n    countries: this.props.countries,\r\n  };\r\n  componentDidMount() {\r\n    //   fetch(\"https://api.covid19api.com/summary\", {\r\n    //     method: \"GET\",\r\n    //     redirect: \"follow\",\r\n    //   })\r\n    //     .then((response) => {\r\n    //       return response.json();\r\n    //     })\r\n    //     .then((data) => {\r\n    //       data.Countries.forEach((country) => this.state.countries.push(country));\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       console.log(err);\r\n    //     });\r\n    //   this.updateCountries();\r\n    // }\r\n    // updateCountries() {\r\n    //   this.props.setCountries(this.state.countries);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n          <ZoomableGroup>\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map((geo) => (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    onMouseEnter={() => {\r\n                      const { ISO_A2 } = geo.properties;\r\n                      this.state.countries.forEach((countryName) => {\r\n                        if (countryName.CountryCode === ISO_A2) {\r\n                          this.props.setTooltipContent(\r\n                            countryName.Country,\r\n                            countryName.TotalConfirmed,\r\n                            countryName.NewConfirmed,\r\n                            countryName.TotalDeaths,\r\n                            countryName.NewDeaths,\r\n                            countryName.TotalRecovered,\r\n                            countryName.NewRecovered,\r\n                            countryName.Date\r\n                          );\r\n                        } else {\r\n                          return;\r\n                        }\r\n                      });\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      this.props.setTooltipContent(\"\");\r\n                    }}\r\n                    style={{\r\n                      default: {\r\n                        fill: \"#D6D6DA\",\r\n                        outline: \"none\",\r\n                        border: \"black\",\r\n                      },\r\n                      hover: {\r\n                        fill: \"#F53\",\r\n                        outline: \"none\",\r\n                      },\r\n                      pressed: {\r\n                        fill: \"#E42\",\r\n                        outline: \"none\",\r\n                      },\r\n                    }}\r\n                  />\r\n                ))\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        </ComposableMap>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default memo(Map);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst Tooltip = (props) => {\r\n  const { data } = props;\r\n  return (\r\n    <ReactTooltip>\r\n      <p>Country: {data.country}</p>\r\n      <p>\r\n        Confirmed cases: {data.confirmed}\r\n        <span></span> New cases: {data.newConfirmed}\r\n      </p>\r\n\r\n      <p>\r\n        Death total: {data.deaths} <span></span> New deaths: {data.newDeaths}\r\n      </p>\r\n      <p>\r\n        Recovered: {data.recovered} <span></span> New recovered:{\" \"}\r\n        {data.newRecovered}{\" \"}\r\n      </p>\r\n      <p>Update time: {data.date}</p>\r\n    </ReactTooltip>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst data = {\r\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\"],\r\n  datasets: [\r\n    {\r\n      data: [13, 20, 7, 15, 21],\r\n      backgroundColor: \"rgba(75,192,192,0.4)\",\r\n    },\r\n  ],\r\n};\r\n\r\nclass Chart extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <Line data={data} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\n\r\n// class Input extends Component {\r\n//   state = {\r\n//     countries: [],\r\n//   };\r\n\r\n//   render() {\r\n//     // const sortedCountries = [];\r\n//     // this.state.countries.map((option) => {\r\n//     //   sortedCountries.sort().push(option.Country);\r\n//     // });\r\n\r\n//     return (\r\n//       <select name=\"countries\" id=\"countrySelecet\">\r\n//         {/* {this.createOption()} */}\r\n//         {this.state.countries.map((option, key) => {\r\n//           return (\r\n//             <option key={key} value={option.slug}>\r\n//               {option.Country}\r\n//             </option>\r\n//           );\r\n//         })}\r\n//       </select>\r\n//     );\r\n//   }\r\n// }\r\nclass Input extends Component {\r\n  state = {\r\n    countries: this.props.countries,\r\n  };\r\n  //   componentDidUpdate() {\r\n  //     if (this.state.countries.length < 2) {\r\n  //       this.setState({\r\n  //         countries: this.props,\r\n  //       });\r\n  //     }\r\n  //   }\r\n  //   createOptions() {\r\n  //     this.state.countries.map((country, key) => {\r\n  //       return (\r\n  //         <option key={key} value={country.slug}>\r\n  //           {country.Country}\r\n  //         </option>\r\n  //       );\r\n  //     });\r\n  //   }\r\n\r\n  render() {\r\n    return (\r\n      <select name=\"countries\" id=\"countrySelected\">\r\n        {this.state.countries &&\r\n          this.state.countries.map((country) => {\r\n            return (\r\n              <option key={country.CountryCode} value={country.slug}>\r\n                {country.Country}\r\n              </option>\r\n            );\r\n          })}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Map from \"./Components/Map\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Tooltip from \"./Components/ReactTooltip\";\nimport Chart from \"./Components/Charts\";\nimport Input from \"./Components/Input\";\n\nclass App extends Component {\n  state = {\n    countries: [],\n    country: \"\",\n    confirmed: null,\n    newConfirmed: null,\n    deaths: null,\n    newDeaths: null,\n    recovered: null,\n    newRecovered: null,\n    date: \"\",\n  };\n  // setCountries = (countries) => {\n  //   this.setState({\n  //     countries,\n  //   });\n  // };\n\n  setTooltipContent = (\n    country,\n    confirmed,\n    newConfirmed,\n    deaths,\n    newDeaths,\n    recovered,\n    newRecovered,\n    date\n  ) => {\n    this.setState({\n      country,\n      confirmed,\n      newConfirmed,\n      deaths,\n      newDeaths,\n      recovered,\n      newRecovered,\n      date,\n    });\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/summary\", {\n      method: \"GET\",\n      redirect: \"follow\",\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        data.Countries.forEach((country) => this.state.countries.push(country));\n      })\n\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"map\">\n          <Map\n            setTooltipContent={this.setTooltipContent}\n            countries={this.state.countries}\n          />\n          {this.state.country && <Tooltip data={this.state} />}\n        </div>\n        <div className=\"charts\">\n          <Input countries={this.state.countries} />\n          <Chart />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}