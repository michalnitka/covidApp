{"version":3,"sources":["Components/Map.js","Components/ReactTooltip.js","Components/Charts.js","Components/Input.js","App.js","index.js"],"names":["memo","countries","setTooltipContent","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","ISO_A2","properties","filter","countryName","CountryCode","Country","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","Date","substring","onMouseLeave","style","default","fill","outline","border","hover","pressed","Tooltip","props","data","country","confirmed","newConfirmed","deaths","newDeaths","recovered","newRecovered","date","Charts","countryData","name","color","labels","datasets","label","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","active","property","className","requestOptions","method","redirect","Input","state","selectValue","dataActive","dataDeaths","handleChange","e","setState","target","value","getData","fetch","then","response","json","Active","Deaths","catch","error","console","log","this","prevProps","prevState","id","onChange","Slug","Component","App","Countries","err","Index","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cc54b239.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\n\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nfunction Map({ countries, setTooltipContent }) {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { ISO_A2 } = geo.properties;\r\n                    countries\r\n                      .filter(\r\n                        (countryName) => countryName.CountryCode === ISO_A2\r\n                      )\r\n                      .map((countryName) => {\r\n                        return setTooltipContent(\r\n                          countryName.Country,\r\n                          countryName.TotalConfirmed,\r\n                          countryName.NewConfirmed,\r\n                          countryName.TotalDeaths,\r\n                          countryName.NewDeaths,\r\n                          countryName.TotalRecovered,\r\n                          countryName.NewRecovered,\r\n                          `${countryName.Date.substring(\r\n                            0,\r\n                            10\r\n                          )} ${countryName.Date.substring(11, 16)}`\r\n                        );\r\n                      });\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\",\r\n                      border: \"black\",\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\",\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\",\r\n                    },\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Map);\r\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst Tooltip = (props) => {\r\n  const { data } = props;\r\n  return (\r\n    <ReactTooltip>\r\n      <p>Country: {data.country}</p>\r\n      <p>\r\n        Confirmed cases: {data.confirmed}\r\n        <span></span> New cases: {data.newConfirmed}\r\n      </p>\r\n\r\n      <p>\r\n        Death total: {data.deaths} <span></span> New deaths: {data.newDeaths}\r\n      </p>\r\n      <p>\r\n        Recovered: {data.recovered} <span></span> New recovered:{\" \"}\r\n        {data.newRecovered}{\" \"}\r\n      </p>\r\n      <p>Update time: {data.date}</p>\r\n    </ReactTooltip>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Charts = ({ countryData, name, color }) => {\r\n  const data = {\r\n    labels: countryData.map((date) => date.date),\r\n\r\n    datasets: [\r\n      {\r\n        label: name,\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        borderColor: color,\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: color,\r\n        pointBackgroundColor: \"#fff\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: color,\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: countryData.map((active) => active.property),\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <div className=\"chart-conteiner\">\r\n      <Line data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React, { Component } from \"react\";\r\nimport Charts from \"./Charts\";\r\n\r\nlet requestOptions = {\r\n  method: \"GET\",\r\n  redirect: \"follow\",\r\n};\r\nclass Input extends Component {\r\n  state = {\r\n    selectValue: \"afghanistan\",\r\n    dataActive: [],\r\n    dataDeaths: [],\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      selectValue: e.target.value,\r\n    });\r\n  };\r\n  getData = () => {\r\n    fetch(\r\n      `https://api.covid19api.com/total/country/${this.state.selectValue}`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          dataActive: data\r\n            .filter((country) => country.Active > 0)\r\n            .map((country) => ({\r\n              property: country.Active,\r\n              date: country.Date.substring(0, 10),\r\n            })),\r\n          dataDeaths: data\r\n            .filter((country) => country.Deaths > 0)\r\n            .map((country) => ({\r\n              property: country.Deaths,\r\n              date: country.Date.substring(0, 10),\r\n            })),\r\n        })\r\n      )\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.selectValue !== prevState.selectValue) {\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <select\r\n          value={this.state.selectValue}\r\n          name=\"countries\"\r\n          id=\"countrySelected\"\r\n          onChange={this.handleChange}\r\n        >\r\n          {this.props.countries &&\r\n            this.props.countries.map((country) => {\r\n              return (\r\n                <option key={country.CountryCode} value={country.Slug}>\r\n                  {country.Country}\r\n                </option>\r\n              );\r\n            })}\r\n        </select>\r\n        {this.state.selectValue && (\r\n          <>\r\n            {\" \"}\r\n            <Charts\r\n              countryData={this.state.dataActive}\r\n              name=\"Active cases\"\r\n              color=\"rgba(1, 167, 255, 1)\"\r\n            />\r\n            <Charts\r\n              countryData={this.state.dataDeaths}\r\n              name=\"Deaths\"\r\n              color=\"rgba(255, 37, 37, 1)\"\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\nimport Map from \"./Components/Map\";\nimport \"./App.css\";\nimport Tooltip from \"./Components/ReactTooltip\";\nimport Input from \"./Components/Input\";\n\nclass App extends Component {\n  state = {\n    countries: [],\n    country: \"\",\n    confirmed: null,\n    newConfirmed: null,\n    deaths: null,\n    newDeaths: null,\n    recovered: null,\n    newRecovered: null,\n    date: \"\",\n    selectValue: \"\",\n  };\n\n  setTooltipContent = (\n    country,\n    confirmed,\n    newConfirmed,\n    deaths,\n    newDeaths,\n    recovered,\n    newRecovered,\n    date\n  ) => {\n    this.setState({\n      country,\n      confirmed,\n      newConfirmed,\n      deaths,\n      newDeaths,\n      recovered,\n      newRecovered,\n      date,\n    });\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/summary\", {\n      method: \"GET\",\n      redirect: \"follow\",\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ countries: data.Countries });\n      })\n\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"map\">\n          <Map\n            setTooltipContent={this.setTooltipContent}\n            countries={this.state.countries}\n          />\n          {this.state.country && <Tooltip data={this.state} />}\n        </div>\n        <div className=\"charts\">\n          <Input countries={this.state.countries} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport App from \"./App\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Index = () => {\r\n  return <App />;\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<Index />, rootElement);\r\n"],"sourceRoot":""}